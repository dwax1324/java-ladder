package domain;

public record Point(int x, int y) {
}

    /*
        Position이 직접 해결
        Position 도메인에서는 무엇을 알아야할까?
        Position이 직접 움직이려면 당연히 Ladder의 정보가 필요하겠지
        근데 딱 move만큼만 보면,
        Position이 필요한 정보는 이전 칸의 정보와 현재 칸의 정보다.
        그럼 조금 더 적절한 설계는 무엇일까?
        Position은 이전 Position의 정보를 알고 있으면 된다.
        즉, 각 Position을 노드라고 생각했을 때  parent node를 가져야한다
        단, 그렇게 하면 외부에서 Position을 생성할 때 많은 정보를 알고 있어야한다

        사다리게임의 참가자가 4명일 때,
        |-|-|-| <- 네 개 줄과 세 개의 칸이 있다.

        각 칸을 포인트로 보지 말고,
        각 참가자(세로줄)를 포인트로 봐보자
        각 세로줄의 한 칸은 true or false, true or false 값을 갖는데,
        전자가 true라면 왼쪽으로 움직여야한다는 뜻이고,
        후자가 true라면 오른쪽으로 움직여야한다는 뜻이고,
        둘 다 false라면 움직이지 않는다는 뜻이다.

        그렇다면 상태를 3개를 갖는다는 뜻이고, 객체로 분리하는게 맞는거 같다.

        하나의 포인트는 수평으로 움직이는 것과 수직으로 움직일 수 있어야 한다.
        수직으로 움직일 때는 단순히 값을 집어넣어 주고 그 시행 횟수만큼 움직인다.
        수평으로 움직일 때는 좌,우,제자리로 움직일 수 있는 판단 로직이 들어 있어야한다.

        Direction은 Position이 나아가야할 방향을 제시한다. (LEFT,RIGHT,STRAIGHT)
        Position이 Direction을 갖는다. Position은 스스로 움직일 수 있어야 한다.



        각 Position에서 스스로 움직일 수 있으려면, 어떻게 해야할까?
        각 Position이 이전 위치의 정보를 알아야한다.

        Position한테 필요한 정보는 다음 가로줄로 넘어가기 위한 정보다.
        다음 가로 줄로 넘어갈 때 필요한 정보는 현재 가로 인덱스에서 가만히 있을지, 왼쪽으로 갈지, 오른쪽으로 갈지에 대한 정보다.
        가만히 있을 지, 왼쪽으로 갈지, 오른쪽으로 갈지에 대한 판단 근거는 가로줄이 연결 되어 있느냐이다.
        만약, 현재 세로줄과 이전 세로줄이 가로줄로 연결 되어 있다면 그냥 정말 단순하게 두 세로줄을 연결시켜주면 된다.

        그럼, 현재 가로줄에서 다음 가로줄로 넘어갈 때 판단 근거는,


        만약 다른 세로선으로 넘어갈 수 있다면 넘어간다.

        그렇다면 필요한 정보는, 현재 Position의 x,y정보(Point객체)와 다음 Position의 정보 그리고 이전 Position의 정보가 필요하다.
        만약 현재 Position과 다음 Position이 연결이 되어 있다면 오른쪽으로 이동한다
        만약 현재 Postion과 이전 Position이 연결 되어 있다면 왼쪽으로 이동한다

        연결 되어 있는지 확인 여부는 head 혹은 tail이 null이 아니면 연결 되어 있음을 나타낸다. <- optional로 리팩터링 가능



        결국 생성을 어떻게 할 것인가?
        사람 수 - 1 개의 true or false를 생성해서
        true라면 왼쪽에 있는 point는 right으로, 오른쪽에 있는 point는 left로 움직일 수 있게 해야겠다.


        포인트의 입장에서 생각해보자고.
        만약 리스트에서 이전에 있는 포인트가 사라졌다면?

        포인트의 입장에서 가로 사다리가 생기면 하나의 페어가 생기는 것이다.
        페어가 있다면 Left, Right 상관 없이 그쪽 사다리로 넘어가면 될 일이다.
     */

